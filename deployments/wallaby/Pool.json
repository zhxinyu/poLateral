{
  "address": "0xEe8470960EB3b01cc7c68ddc337c9fDF75cF8882",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.InterestRateMode",
          "name": "interestRateMode",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "receiveAToken",
          "type": "bool"
        }
      ],
      "name": "LiquidationCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useATokens",
          "type": "bool"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "FILAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sFILAddress",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a9747534fd77d85eb921478625cdcb56d2ad748fac44e47bfe0d1be4216409c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xEe8470960EB3b01cc7c68ddc337c9fDF75cF8882",
    "transactionIndex": 0,
    "gasUsed": "56213276",
    "logsBloom": "0x
    "blockHash": "0xbb830883ee452e30f26ffaa5cb9c3425503f546cc31271e6b9f6e75a33ef031f",
    "transactionHash": "0x0a9747534fd77d85eb921478625cdcb56d2ad748fac44e47bfe0d1be4216409c",
    "logs": [],
    "blockNumber": 8873,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 5,
  "solcInputHash": "bc32b7c5960fc5773cdde978b817df14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useATokens\",\"type\":\"bool\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"FILAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sFILAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"provider\":\"The address of the PoolAddressesProvider contract\"}},\"init(address,address)\":{\"params\":{\"FILAddress\":\"FIL address\",\"sFILAddress\":\"The address of the overlying sFILAddress contract*\"}},\"supply(address,uint256,address)\":{\"params\":{\"amount\":\"The amount to be supplied\",\"asset\":\"The address of the underlying asset to supply\",\"onBehalfOf\":\"The address that will receive the aFIL, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aFIL   is a different wallet*\"}},\"withdraw(address,uint256,address)\":{\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"init(address,address)\":{\"notice\":\"Map from FILAddress to sFILAddress.\"},\"supply(address,uint256,address)\":{\"notice\":\"Supplies an `amount` of underlying asset FIL into the reserve, receiving in return overlying aFIL. - E.g. User supplies 100 FIL and gets in return 100 aFIL\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aFIL, calls withdraw() and receives 100 FIL, burning the 100 aFIL\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author EthanZ\\n * @notice Defines the basic interface for an FIL Lending Pool.\\n **/\\n interface IPool{\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the sFILs\\n   * @param amount The amount supplied\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount\\n  );\\n\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of sFILs\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using sFILs, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset FIL into the reserve, receiving in return overlying aFIL.\\n   * - E.g. User supplies 100 FIL and gets in return 100 aFIL\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aFIL, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aFIL\\n   *   is a different wallet\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aFIL, calls withdraw() and receives 100 FIL, burning the 100 aFIL\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  // /**\\n  //  * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n  //  * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n  //  * corresponding debt token (StableDebtToken or VariableDebtToken)\\n  //  * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n  //  *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n  //  * @param asset The address of the underlying asset to borrow\\n  //  * @param amount The amount to be borrowed\\n  //  * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n  //  * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n  //  * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n  //  * if he has been given credit delegation allowance\\n  //  **/\\n  // function borrow(\\n  //   address asset,\\n  //   uint256 amount,\\n  //   uint256 interestRateMode,\\n  //   address onBehalfOf\\n  // ) external;\\n\\n  // /**\\n  //  * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n  //  * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n  //  * @param asset The address of the borrowed underlying asset previously borrowed\\n  //  * @param amount The amount to repay\\n  //  * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n  //  * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n  //  * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n  //  * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n  //  * other borrower whose debt should be removed\\n  //  * @return The final amount repaid\\n  //  **/\\n  // function repay(\\n  //   address asset,\\n  //   uint256 amount,\\n  //   uint256 interestRateMode,\\n  //   address onBehalfOf\\n  // ) external returns (uint256);\\n\\n  // /**\\n  //  * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n  //  * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n  //  *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n  //  * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n  //  * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n  //  * @param user The address of the borrower getting liquidated\\n  //  * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n  //  * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n  //  * to receive the underlying collateral asset directly\\n  //  **/\\n  // function liquidationCall(\\n  //   address collateralAsset,\\n  //   address debtAsset,\\n  //   address user,\\n  //   uint256 debtToCover,\\n  //   bool receiveAToken\\n  // ) external;\\n\\n  // /**\\n  //  * @notice Returns the list of the underlying assets of all the initialized reserves\\n  //  * @dev It does not include dropped reserves\\n  //  * @return The addresses of the underlying assets of the initialized reserves\\n  //  **/\\n  // function getReserves() external view returns (address);\\n\\n  // /**\\n  //  * @notice Rescue and transfer tokens locked in this contract\\n  //  * @param token The address of the token\\n  //  * @param to The address of the recipient\\n  //  * @param amount The amount of token to transfer\\n  //  */\\n  // function rescueTokens(\\n  //   address token,\\n  //   address to,\\n  //   uint256 amount\\n  // ) external;\\n  \\n }\",\"keccak256\":\"0xf2f9227f3e260c118481180666d8ddc376a896cb78c83ba0dda4f3e3ad6cabbd\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IWFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IWFIL {\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n}\",\"keccak256\":\"0xe4924627db5241f60ffacb1c78829531b016a4d96a90d9c66354abc02a11999c\",\"license\":\"MIT\"},\"contracts/interfaces/IsFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IsFIL {\\n\\n    function mint(address caller, address onBehalfOf, uint256 amount) external returns (bool);\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n\\n}\",\"keccak256\":\"0x9de33e5da28a5ac3fec794a97877c9dc2b686ebba06d3b4ce6ea2fe547a04f4a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant SAME_BLOCK_BORROW_REPAY = '48'; // 'Borrow and repay in same block is not allowed'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = '54'; // 'AToken supply is not zero'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n}\\n\",\"keccak256\":\"0xc8a8024ade7cc19e06f70ad0dcb6657370310b4d1e440018e7701172b5051071\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n// import {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\n// import {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\n// import {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\\n// import {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n// import {MathUtils} from '../math/MathUtils.sol';\\n// import {WadRayMath} from '../math/WadRayMath.sol';\\n// import {PercentageMath} from '../math/PercentageMath.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n// import {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n\\n  /**\\n   * @notice Updates the liquidity cumulative index and the variable borrow index.\\n   * @param reserve The reserve object\\n   **/\\n  function updateState(\\n    DataTypes.ReserveData storage reserve\\n  ) internal {\\n    _updateIndexes(reserve);\\n  }\\n\\n\\n  /**\\n   * @notice Updates the reserve indexes and the timestamp of the update.\\n   * @param reserve The reserve reserve to be updated\\n   **/\\n  function _updateIndexes(\\n    DataTypes.ReserveData storage reserve\\n  ) internal {\\n    //solium-disable-next-line\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4c3b3715feda5d799b128456ab6397a3ee8b204c936c67fe42b8a511c5f1a83f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logic/SupplyLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IWFIL} from '../../../interfaces/IWFIL.sol';\\nimport {IsFIL} from '../../../interfaces/IsFIL.sol';\\n\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\n\\n/**\\n * @title SupplyLogic library\\n * @notice Implements the base logic for supply/withdraw\\n */\\nlibrary SupplyLogic {\\n\\n  using ReserveLogic for DataTypes.ReserveData;\\n\\n  /**\\n   * @notice Implements the supply feature. Through `supply()`, users supply assets to the Aave protocol.\\n   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as\\n   * collateral.\\n   * @param reservesData The state of all the reserves\\n   * @param params The additional parameters needed to execute the supply function\\n   */\\n  function executeSupply(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.ExecuteSupplyParams memory params\\n  ) internal {\\n\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    reserve.updateState();\\n\\n    ValidationLogic.validateSupply(params.amount);\\n\\n    IWFIL(params.asset).transferFrom(params.from, reserve.sFILAddress, params.amount);\\n\\n    IsFIL(reserve.sFILAddress).mint(msg.sender, params.onBehalfOf, params.amount);\\n\\n  }\\n\\n/**\\n   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their sFILs for the underlying asset\\n   * previously supplied in the protocol.\\n   * @param reservesData The state of all the reserves\\n   * @param params The additional parameters needed to execute the withdraw function\\n   * @return The actual amount withdrawn\\n   */\\n  function executeWithdraw(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.ExecuteWithdrawParams memory params\\n  ) internal returns (uint256) {\\n\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    reserve.updateState();\\n\\n    uint256 userBalance = IsFIL(reserve.sFILAddress).balanceOf(msg.sender);\\n\\n    uint256 amountToWithdraw = params.amount;\\n\\n    if (params.amount == type(uint256).max) {\\n      amountToWithdraw = userBalance;\\n    }\\n\\n    ValidationLogic.validateWithdraw(amountToWithdraw, userBalance);\\n\\n    IsFIL(reserve.sFILAddress).burn(msg.sender, amountToWithdraw);\\n\\n    IWFIL(reserve.sFILAddress).transferFrom(reserve.sFILAddress, params.to, amountToWithdraw);\\n\\n    return amountToWithdraw;\\n  }\\n\\n}\",\"keccak256\":\"0x17f6d5c2e2e547b3605ede7fe67c837f8b02c8f6e7b297729151f6a69b11bce9\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n  /**\\n   * @notice Validates a supply action.\\n   * @param amount The amount to be supplied\\n   */\\n  function validateSupply(uint256 amount)\\n    internal\\n    pure \\n  {\\n    require(amount != 0, Errors.INVALID_AMOUNT);\\n  }\\n\\n  /**\\n   * @notice Validates a withdraw action.\\n   * @param amount The amount to be withdrawn\\n   * @param userBalance The balance of the user\\n   */\\n  function validateWithdraw(\\n    uint256 amount,\\n    uint256 userBalance\\n  ) internal pure {\\n    require(amount != 0, Errors.INVALID_AMOUNT);\\n    require(amount <= userBalance, Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xdbce83eed5f9eaf37775180120a0494c9178775ec3315832c7264ba948c2db50\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n\\n  enum InterestRateMode {\\n    NONE\\n  }\\n\\n  struct ReserveData {\\n  //sFIL address\\n  address sFILAddress;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address from;\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n  }\\n\\n}\",\"keccak256\":\"0x2a3141188c3b151cf7a8637ab4a083f13267d4d362329d66594d156f85a72814\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\nimport {SupplyLogic} from '../libraries/logic/SupplyLogic.sol';\\nimport {PoolStorage} from './PoolStorage.sol';\\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\n\\ncontract Pool is PoolStorage, IPool {\\n    address public immutable poolOwner;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the PoolAddressesProvider contract\\n     */\\n    constructor(address provider) {\\n        poolOwner = provider;\\n    }\\n\\n    /**\\n     * @notice Map from FILAddress to sFILAddress.\\n     * @param FILAddress FIL address\\n     * @param sFILAddress The address of the overlying sFILAddress contract\\n     **/\\n    function init(\\n        address FILAddress,\\n        address sFILAddress\\n    ) external {\\n        require(msg.sender == poolOwner);\\n        require(_reserves[FILAddress].sFILAddress == address(0), Errors.RESERVE_ALREADY_INITIALIZED);\\n        _reserves[FILAddress].sFILAddress = sFILAddress;\\n    }\\n\\n    /// @inheritdoc IPool\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) public virtual override {\\n        SupplyLogic.executeSupply(\\n            _reserves,\\n            DataTypes.ExecuteSupplyParams({\\n                from: msg.sender,\\n                asset: asset,\\n                amount: amount,\\n                onBehalfOf: onBehalfOf\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IPool\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) public virtual override returns (uint256) {\\n        return\\n        SupplyLogic.executeWithdraw(\\n            _reserves,\\n            DataTypes.ExecuteWithdrawParams({\\n            asset: asset,\\n            amount: amount,\\n            to: to\\n            })\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x803592d81d91fa648fe67c5528e5063789a3ed450e0ba24edf8ee0398ab0b76f\",\"license\":\"MIT\"},\"contracts/protocol/pool/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {ReserveLogic} from '../libraries/logic/ReserveLogic.sol';\\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\\n\\n/**\\n * @title PoolStorage\\n * @notice Contract used as storage of the Pool contract.\\n * @dev It defines the storage layout of the Pool contract.\\n */\\ncontract PoolStorage {\\n  using ReserveLogic for DataTypes.ReserveData;\\n\\n  // Map of reserves and their data (underlyingAssetOfReserve => reserveData)\\n  mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n}\\n\",\"keccak256\":\"0x5d2328ab68a24ff5e6797eab363e08ca897026c0791cb192bd802ddf1334de20\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e53380380610e53833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610d3561011e600039600081816101a701526101cb0152610d356000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806369328dec146100515780638b2a4df514610081578063cf0b22701461009d578063f09a4016146100bb575b600080fd5b61006b60048036038101906100669190610a56565b6100d7565b6040516100789190610ab8565b60405180910390f35b61009b60048036038101906100969190610a56565b610133565b005b6100a56101a5565b6040516100b29190610ae2565b60405180910390f35b6100d560048036038101906100d09190610afd565b6101c9565b005b600061012a600060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff168152506103ae565b90509392505050565b6101a0600060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681525061064d565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f363100000000000000000000000000000000000000000000000000000000000081525090610329576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103209190610bd6565b60405180910390fd5b50806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080836000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506103fe8161080c565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161045d9190610ae2565b602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610c0d565b90506000846020015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff856020015114156104d9578190505b6104e38183610818565b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610542929190610c3a565b600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760400151846040518463ffffffff1660e01b81526004016105fd93929190610c63565b6020604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610cd2565b5080935050505092915050565b6000826000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061069c8161080c565b6106a98260400151610915565b816020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd83600001518360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604001516040518463ffffffff1660e01b815260040161071693929190610c63565b6020604051808303816000875af1158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610cd2565b508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c6c3bbe633846060015185604001516040518463ffffffff1660e01b81526004016107c393929190610c63565b6020604051808303816000875af11580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190610cd2565b50505050565b61081581610995565b50565b60008214156040518060400160405280600281526020017f323600000000000000000000000000000000000000000000000000000000000081525090610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b9190610bd6565b60405180910390fd5b50808211156040518060400160405280600281526020017f333200000000000000000000000000000000000000000000000000000000000081525090610910576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109079190610bd6565b60405180910390fd5b505050565b60008114156040518060400160405280600281526020017f323600000000000000000000000000000000000000000000000000000000000081525090610991576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109889190610bd6565b60405180910390fd5b5050565b428160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ed826109c2565b9050919050565b6109fd816109e2565b8114610a0857600080fd5b50565b600081359050610a1a816109f4565b92915050565b6000819050919050565b610a3381610a20565b8114610a3e57600080fd5b50565b600081359050610a5081610a2a565b92915050565b600080600060608486031215610a6f57610a6e6109bd565b5b6000610a7d86828701610a0b565b9350506020610a8e86828701610a41565b9250506040610a9f86828701610a0b565b9150509250925092565b610ab281610a20565b82525050565b6000602082019050610acd6000830184610aa9565b92915050565b610adc816109e2565b82525050565b6000602082019050610af76000830184610ad3565b92915050565b60008060408385031215610b1457610b136109bd565b5b6000610b2285828601610a0b565b9250506020610b3385828601610a0b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b77578082015181840152602081019050610b5c565b83811115610b86576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ba882610b3d565b610bb28185610b48565b9350610bc2818560208601610b59565b610bcb81610b8c565b840191505092915050565b60006020820190508181036000830152610bf08184610b9d565b905092915050565b600081519050610c0781610a2a565b92915050565b600060208284031215610c2357610c226109bd565b5b6000610c3184828501610bf8565b91505092915050565b6000604082019050610c4f6000830185610ad3565b610c5c6020830184610aa9565b9392505050565b6000606082019050610c786000830186610ad3565b610c856020830185610ad3565b610c926040830184610aa9565b949350505050565b60008115159050919050565b610caf81610c9a565b8114610cba57600080fd5b50565b600081519050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce76109bd565b5b6000610cf684828501610cbd565b9150509291505056fea2646970667358221220abcb2d7832eae8a9bcc7cf7a8eb488c406c12bd322367ce4c4d4b57c729ac82264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806369328dec146100515780638b2a4df514610081578063cf0b22701461009d578063f09a4016146100bb575b600080fd5b61006b60048036038101906100669190610a56565b6100d7565b6040516100789190610ab8565b60405180910390f35b61009b60048036038101906100969190610a56565b610133565b005b6100a56101a5565b6040516100b29190610ae2565b60405180910390f35b6100d560048036038101906100d09190610afd565b6101c9565b005b600061012a600060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff168152506103ae565b90509392505050565b6101a0600060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681525061064d565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f363100000000000000000000000000000000000000000000000000000000000081525090610329576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103209190610bd6565b60405180910390fd5b50806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080836000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506103fe8161080c565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161045d9190610ae2565b602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610c0d565b90506000846020015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff856020015114156104d9578190505b6104e38183610818565b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610542929190610c3a565b600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b505050508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760400151846040518463ffffffff1660e01b81526004016105fd93929190610c63565b6020604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610cd2565b5080935050505092915050565b6000826000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061069c8161080c565b6106a98260400151610915565b816020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd83600001518360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604001516040518463ffffffff1660e01b815260040161071693929190610c63565b6020604051808303816000875af1158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610cd2565b508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c6c3bbe633846060015185604001516040518463ffffffff1660e01b81526004016107c393929190610c63565b6020604051808303816000875af11580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190610cd2565b50505050565b61081581610995565b50565b60008214156040518060400160405280600281526020017f323600000000000000000000000000000000000000000000000000000000000081525090610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b9190610bd6565b60405180910390fd5b50808211156040518060400160405280600281526020017f333200000000000000000000000000000000000000000000000000000000000081525090610910576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109079190610bd6565b60405180910390fd5b505050565b60008114156040518060400160405280600281526020017f323600000000000000000000000000000000000000000000000000000000000081525090610991576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109889190610bd6565b60405180910390fd5b5050565b428160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ed826109c2565b9050919050565b6109fd816109e2565b8114610a0857600080fd5b50565b600081359050610a1a816109f4565b92915050565b6000819050919050565b610a3381610a20565b8114610a3e57600080fd5b50565b600081359050610a5081610a2a565b92915050565b600080600060608486031215610a6f57610a6e6109bd565b5b6000610a7d86828701610a0b565b9350506020610a8e86828701610a41565b9250506040610a9f86828701610a0b565b9150509250925092565b610ab281610a20565b82525050565b6000602082019050610acd6000830184610aa9565b92915050565b610adc816109e2565b82525050565b6000602082019050610af76000830184610ad3565b92915050565b60008060408385031215610b1457610b136109bd565b5b6000610b2285828601610a0b565b9250506020610b3385828601610a0b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b77578082015181840152602081019050610b5c565b83811115610b86576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ba882610b3d565b610bb28185610b48565b9350610bc2818560208601610b59565b610bcb81610b8c565b840191505092915050565b60006020820190508181036000830152610bf08184610b9d565b905092915050565b600081519050610c0781610a2a565b92915050565b600060208284031215610c2357610c226109bd565b5b6000610c3184828501610bf8565b91505092915050565b6000604082019050610c4f6000830185610ad3565b610c5c6020830184610aa9565b9392505050565b6000606082019050610c786000830186610ad3565b610c856020830185610ad3565b610c926040830184610aa9565b949350505050565b60008115159050919050565b610caf81610c9a565b8114610cba57600080fd5b50565b600081519050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce76109bd565b5b6000610cf684828501610cbd565b9150509291505056fea2646970667358221220abcb2d7832eae8a9bcc7cf7a8eb488c406c12bd322367ce4c4d4b57c729ac82264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "provider": "The address of the PoolAddressesProvider contract"
        }
      },
      "init(address,address)": {
        "params": {
          "FILAddress": "FIL address",
          "sFILAddress": "The address of the overlying sFILAddress contract*"
        }
      },
      "supply(address,uint256,address)": {
        "params": {
          "amount": "The amount to be supplied",
          "asset": "The address of the underlying asset to supply",
          "onBehalfOf": "The address that will receive the aFIL, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aFIL   is a different wallet*"
        }
      },
      "withdraw(address,uint256,address)": {
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        },
        "returns": {
          "_0": "The final amount withdrawn*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "init(address,address)": {
        "notice": "Map from FILAddress to sFILAddress."
      },
      "supply(address,uint256,address)": {
        "notice": "Supplies an `amount` of underlying asset FIL into the reserve, receiving in return overlying aFIL. - E.g. User supplies 100 FIL and gets in return 100 aFIL"
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aFIL, calls withdraw() and receives 100 FIL, burning the 100 aFIL"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 831,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_reserves",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(ReserveData)680_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ReserveData)680_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)680_storage"
      },
      "t_struct(ReserveData)680_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 677,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "sFILAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 679,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "lastUpdateTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}